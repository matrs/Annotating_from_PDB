#! /usr/bin/env python


from pathlib import Path
import pickle
from collections import defaultdict
import subprocess as sp
import multiprocessing as mp
from itertools import product

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

def arg_parser(args):
    parser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter, 
                            description='Select representative cluster sequences that were not'
                                         ' annotated by eggnog-mapper (no KO) and creates a fasta file for'
                                         ' each one. The clusters representatives may additionally be selected'
                                         ' by the minimum and maximum number of members (cluster size).')


    parser.add_argument('not_ko_list', 
                        help = "List of genes without KO annotations, produced by `egg_select_no_kos.py`")
    parser.add_argument('clusters_tsv', 
                        help = "Clusters' file generated by `mmseqs createtsv`")
    parser.add_argument('seqs_fa',  
                        help = "Multi-fasta with the hypothetical sequences. The same input"
                        " used with eggnog-mapper")
    parser.add_argument('out_dir', 
                        help = "Directory where all the fasta sequences will be placed")
    parser.add_argument('out_file',
                        help = "output file with the list of selected genes")
    parser.add_argument('ncores', type=int, default=4,
                        help = "Number of parallel processes run by seqkit (one per single fasta file created)")
    parser.add_argument('dic_pkl',
                        help = "mapping between representatives and members of each cluster"
                        " (dictionary), written into a pickle file")
    parser.add_argument('--min_number',  type=int, default=15,
                        help = "Selection criteria depending on the minimum number of members of a "
                        " cluster. E.g. 30 means select clusters with 30 or more  members"
                        )
    parser.add_argument('--max_number',  type=int, default=100,
                        help = "Selection criteria depending on the maximum number of members of a "
                        " cluster. E.g. 100 means select clusters with 100 or less members"
                        )
    args = parser.parse_args()
    
    return args



def clusters_to_dic(clusters_tsv):
    '''
    clusters_tsv: Clusters' file generated by `mmseqs createtsv`
    '''
    with open(clusters_tsv, 'r') as fh:
        lines = [l.strip() for l in fh.readlines()]

    map_dic_hyp = defaultdict(list)
    rep = None
    for gene in lines:
        if gene.split('\t')[0] == rep:
            _ , member = gene.split('\t')
            map_dic_hyp[rep].append(member)
        else:
            rep, member = gene.split('\t')
            map_dic_hyp[rep].append(member)
    return map_dic_hyp

def run_seqkit(gene, seqs_fa, out_dir):
    out_dir = Path(out_dir)
    seqkit_cmd = f"seqkit grep -p {gene} {seqs_fa} > {out_dir.joinpath(gene)}.fasta"
    # print(seqkit_cmd)
    process = sp.check_output(seqkit_cmd, shell=True, universal_newlines=True)
    return process

def main(args=None):
    args = arg_parser(args)
    with open(args.not_ko_list, 'r') as fh:
        rep_genes_not_annot = [gene.strip() for gene in fh]

    map_dic_hyp = clusters_to_dic(args.clusters_tsv)
    rep_genes_not_annot_num = defaultdict()
    for rep in rep_genes_not_annot:
        rep_genes_not_annot_num[rep] = len(map_dic_hyp[rep])

    # Selection by number of members per cluster
    subset = [gene for gene,num in rep_genes_not_annot_num.items() 
                if num >= args.min_number and num <= args.max_number]
    print(f'{len(subset)} selected genes')
    # Write the list of genes to out_file
    with open(args.out_file, 'w') as fh:
        for gene in subset:
            print(gene, file=fh)

    with open(args.dic_pkl, 'wb') as fh:
        pickle.dump(map_dic_hyp, fh)

    # how many processes in parallel?
    pool = mp.Pool(processes=args.ncores)
    pool.starmap(run_seqkit, product(subset, [args.seqs_fa], [args.out_dir]))

if __name__ == "__main__":
    main()



